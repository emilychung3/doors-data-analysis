n_correct = sum(door_c),
)
View(grp_data)
res <- grp_data %>% group_by(sub,train,t,switch) %>% summarise(
n_clicks = n(),
n_correct = sum(door_correct),
)
# lydia barnes, march 2024
# this script runs the analysis for data from the 'doors' project.
# TODO:
# fix accuracy and RT calculations
# if running for the first time:
#install.packages("renv")
#renv::init(project = '/Users/lydiabarnes/Documents/academe/projects/doors',bare = TRUE)
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
# essentials
project_path <- '/Users/lydiabarnes/Documents/academe/projects/doors'
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors'
# settings
exp <- 'exp_ts' #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
subjects <- c('sub-01','sub-02')
ses <- 'ses-train' #session: 'ses-learn','ses-train','ses-test'
mes <- 'clicks' #measure: 'clicks' or 'hovers'
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
test = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
switch = integer(),
door_correct = integer(),
offset = numeric()
)
for(sub in subjects){
data <- get_data(data_path,exp,sub,ses)
grp_data <- rbind(grp_data,data[[idx]])
}
# lydia barnes, march 2024
# this script runs the analysis for data from the 'doors' project.
# TODO:
# fix accuracy and RT calculations
# if running for the first time:
#install.packages("renv")
#renv::init(project = '/Users/lydiabarnes/Documents/academe/projects/doors',bare = TRUE)
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
# essentials
project_path <- '/Users/lydiabarnes/Documents/academe/projects/doors'
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors'
# settings
exp <- 'exp_ts' #experiment: 'exp_ts' (task-switching) or 'exp_lt' (learning transfer)
subjects <- c('sub-01','sub-02')
ses <- 'ses-train' #session: 'ses-learn','ses-train','ses-test'
mes <- 'clicks' #measure: 'clicks' or 'hovers'
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
test = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
switch = integer(),
door_correct = integer(),
offset = numeric()
)
for(sub in subjects){
data <- get_data(data_path,exp,sub,ses)
grp_data <- rbind(grp_data,data[[idx]])
}
res <- grp_data %>% group_by(sub,train,t,switch) %>% summarise(
n_clicks = n(),
n_correct = sum(door_correct),
)
View(res)
res <- grp_data %>% group_by(sub,train,t,switch) %>% summarise(
n_clicks = n(),
n_correct = sum(door_correct),
accuracy = n_correct/n_clicks,
rt = max(offset)
) #%>% select(!n_clicks:n_correct)
tes <- res %>% group_by(sub,train,switch)
View(tes)
test <- res %>% group_by(sub,train,switch) %>% summarise(rt = mean(rt),accuracy = mean(accuracy))
View(test)
# lydia barnes, march 2024
# this script runs the analysis for data from the 'doors' project.
# TODO:
# find out how to export renv dependencies
# if running for the first time:
#install.packages("renv")
#renv::init(project = '/Users/lydiabarnes/Documents/academe/projects/doors',bare = TRUE)
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_data.R'))
# essentials
project_path <- '/Users/lydiabarnes/Documents/academe/projects/doors'
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors'
# settings
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
# lydia barnes, march 2024
# this script runs the analysis for data from the 'doors' project.
# TODO:
# find out how to export renv dependencies
# if running for the first time:
#install.packages("renv")
#renv::init(project = '/Users/lydiabarnes/Documents/academe/projects/doors',bare = TRUE)
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
project_path <- '/Users/lydiabarnes/Documents/academe/projects/doors'
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors'
# settings
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
ses <- 'ses-train' #session: 'ses-learn','ses-train','ses-test'
mes <- 'clicks' #measure: 'clicks' or 'hovers'
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
test = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
cond = integer(),
door_correct = integer(),
offset = numeric()
)
for(sub in subs){
data <- get_data(data_path,exp,sub,ses)
grp_data <- rbind(grp_data,data[[idx]])
}
###
# extract results: accuracy and RT (time to trial end)
#   by trial
res <- grp_data %>% group_by(sub,train,t,cond) %>% summarise(
n_clicks = n(),
n_correct = sum(door_correct),
accuracy = n_correct/n_clicks,
rt = max(offset)
) %>% select(!n_clicks:n_correct)
fnl <- file.path(project_path,'res',paste(version,'_trl.csv',sep = ""))
write_csv(res,fnl)
#   by subject
res <- res %>% group_by(sub,train,cond) %>% summarise(rt = mean(rt),accuracy = mean(accuracy))
fnl <- file.path(project_path,'res',paste(version,'_avg.csv',sep = ""))
write_csv(res,fnl)
# lydia barnes, march 2024
# this script runs the analysis for data from the 'doors' project.
# TODO:
# find out how to export renv dependencies
# if running for the first time:
#install.packages("renv")
#renv::init(project = '/Users/lydiabarnes/Documents/academe/projects/doors',bare = TRUE)
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
project_path <- '/Users/lydiabarnes/Documents/academe/projects/doors'
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors'
# settings
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
ses <- 'ses-train' #session: 'ses-learn','ses-train','ses-test'
mes <- 'hovers' #measure: 'clicks' or 'hovers'
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
test = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
cond = integer(),
door_correct = integer(),
offset = numeric()
)
for(sub in subs){
data <- get_data(data_path,exp,sub,ses)
grp_data <- rbind(grp_data,data[[idx]])
}
###
# extract results: accuracy and RT (time to trial end)
#   by trial
res <- grp_data %>% group_by(sub,train,t,cond) %>% summarise(
n_clicks = n(),
n_correct = sum(door_correct),
accuracy = n_correct/n_clicks,
rt = max(offset)
) %>% select(!n_clicks:n_correct)
fnl <- file.path(project_path,'res',paste(version,'_trl.csv',sep = ""))
write_csv(res,fnl)
#   by subject
res <- res %>% group_by(sub,train,cond) %>% summarise(rt = mean(rt),accuracy = mean(accuracy))
fnl <- file.path(project_path,'res',paste(version,'_avg.csv',sep = ""))
write_csv(res,fnl)
renv::snapshot()
# lydia barnes, march 2024
# this script runs the analysis for data from the 'doors' project.
# TODO:
# find out how to export renv dependencies
# extend to allow analysing train and test data together
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
project_path <- '/Users/lydiabarnes/Documents/academe/projects/doors'
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors'
# settings
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
ses <- 'ses-test' #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'hovers' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
test = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
cond = integer(),
door_correct = integer(),
offset = numeric()
)
for(sub in subs){
data <- get_data(data_path,exp,sub,ses)
grp_data <- rbind(grp_data,data[[idx]])
}
# lydia barnes, march 2024
# this script runs the analysis for data from the 'doors' project.
# TODO:
# find out how to export renv dependencies
# extend to allow analysing train and test data together
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
project_path <- '/Users/lydiabarnes/Documents/academe/projects/doors'
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors'
# settings
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
ses <- 'ses-train' #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'hovers' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
test = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
cond = integer(),
door_correct = integer(),
offset = numeric()
)
for(sub in subs){
data <- get_data(data_path,exp,sub,ses)
grp_data <- rbind(grp_data,data[[idx]])
}
View(grp_data)
data <- get_data(data_path,exp,sub,ses)
source(file.path(wd,'get_data.R'))
data <- get_data(data_path,exp,sub,ses)
View(resps)
test <- resps %>% filter(door_p > 0)
View(test)
test <- group_by(t) %>% summarise(these = n_distinct(door)
)
test <- test %>% group_by(t) %>% summarise(these = n_distinct(door)
)
View(test)
test <- test %>% group_by(t,door)
test <- resps %>% filter(door_p > 0) %>% group_by(t,door)
View(test)
test <- resps %>% filter(door_p > 0) %>% group_by(t) %>% summarise(door = unique(door))
test <- resps %>% filter(door_p > 0) %>% group_by(t) %>% distinct(door)
View(test)
test <- resps %>% filter(door_p > 0) %>% group_by(t) %>% list(distinct(door))
test <- resps %>% filter(door_p > 0) %>% group_by(t) %>% distinct(door)
test <- resps %>% filter(door_p > 0) %>% group_by(t) %>% c(distinct(door))
test <- resps %>% filter(door_p > 0) %>% group_by(t) %>% distinct(door) %>% pivot_wider(values_from = door)
test <- resps %>% filter(door_p > 0) %>% group_by(t) %>% distinct(door) %>% pivot_wider(names_from = t, values_from = door)
View(test)
test <- resps %>% filter(door_p > 0) %>% group_by(cond) %>% distinct(door)
View(test)
test <- resps %>% filter(door_p > 0) %>% group_by(cond) %>% distinct(door) %>% pivot_wider(names_from = cond, values_from = door)
View(test)
test <- resps %>% filter(door_p > 0) %>% group_by(cond) %>% distinct(door) %>% mutate(cond = as.character(cond)) %>% pivot_wider(names_from = cond, values_from = door)
View(test)
test2 <- hovers %>% mutate(door_correct = case_when(any(door == doors[cond])~1,.default=0) )
resps <- resps %>%
mutate(door_correct = case_when(door_p>0~1,door_p==0~0,.default=0)) %>%
mutate(change = c(0,diff(open_d))) %>%
mutate(change_d = c(0,diff(door))) %>%
mutate(on = case_when(change==9~TRUE,change==1~TRUE,change==-9~FALSE,change==-1~FALSE,change==-8~TRUE,change==8~TRUE,change_d!=0~TRUE,.default=FALSE)) %>%
mutate(off = case_when(change==-9~TRUE,change==-1~TRUE,change==9~FALSE,change==1~FALSE,change==-8~TRUE,change==8~TRUE,change_d!=0~TRUE,.default=FALSE)) %>%
mutate(off = c(off[2:length(off)],TRUE))
offset <- resps %>% filter(off == TRUE) %>% select(onset) %>% rename(offset = onset)
onset <- resps %>% filter(on == TRUE) %>% select(!(change:off))
if(length(offset$offset) > length(onset$onset)){
resps$on[1]=TRUE
onset <- resps %>% filter(on == TRUE) %>% select(!(change:off))
}
resps <- bind_cols(onset,offset) %>% select(!door_p:y)
# rename 'train' and 'test' to 'group' so treatment is consistent across sessions
if(ses == 'ses-train'){
resps <- resps %>% rename(group = train)
}else{
resps <- resps %>% rename(group = test)
}
source(file.path(wd,'get_data.R'))
data <- get_data(data_path,exp,sub,ses)
doors <- resps %>% filter(door_p > 0) %>% group_by(cond) %>% distinct(door) %>% pivot_wider(names_from = cond, values_from = door)
View(resps)
doors <- resps %>% filter(door_correct == 0) %>% group_by(cond) %>% distinct(door) %>% pivot_wider(names_from = cond, values_from = door)
View(doors)
doors <- resps %>% filter(door_correct == 1) %>% group_by(cond) %>% distinct(door) %>% pivot_wider(names_from = cond, values_from = door)
View(doors)
hovers <- hovers %>% mutate(door_correct = case_when(any(door == doors[cond])~1,.default=0) )
View(hovers)
tmp <- resps %>% filter(open_d == 9) %>% select(!open_d)
hovers <- tmp[0,]
View(hovers)
View(tmp)
i = 1
doors <- resps %>% filter(cond == i) %>% filter(door_correct == 1) %>% group_by(cond) %>% distinct(door) %>% pivot_wider(names_from = cond, values_from = door)
View(doors)
tmp2 <- tmp %>% mutate(door_correct = case_when(any(door == doors)~1,.default=0) )
doors
doors[[1]]
doors[1]
doors[[[1]]]
tmp2 <- tmp %>% mutate(door_correct = case_when(any(door == doors[[1]])~1,.default=0) )
tmp2 <- tmp %>% mutate(door_correct = case_when(door %in% doors~1,.default=0) )
View(tmp2)
door %in% doors
tmp$door %in% doors
tmp$door[[1]] %in% doors
tmp$door[[2]] %in% doors
tmp$door[[4]] %in% doors
tmp$door[[4]]
doors
doors[[1]]
tmp$door[[4]] %in% doors[[1]]
x = tmp$door[[4]]
y <- doors[[1]]
x
y
y[1]
y[[1]]
tmp$door[[4]] %in% doors[[1]][[1]]
tmp2 <- tmp %>% mutate(door_correct = case_when(door %in% doors[[1]][[1]]~1,.default=0) )
View(tmp2)
source(file.path(wd,'get_data.R'))
data <- get_data(data_path,exp,sub,ses)
View(data)
# lydia barnes, march 2024
# this script runs the analysis for data from the 'doors' project.
# TODO:
# find out how to export renv dependencies
# extend to allow analysing train and test data together
###
# sources
library(rstudioapi)
library(tidyverse)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
source(file.path(wd,'get_data.R'))
source(file.path(wd,'get_subs.R'))
# essentials
project_path <- '/Users/lydiabarnes/Documents/academe/projects/doors'
data_path <- '/Users/lydiabarnes/Documents/academe/data/doors'
# settings
exp <- 'exp_ts' #experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
subs <- get_subs(exp)
ses <- 'ses-train' #session: 'ses-learn','ses-train','ses-test'. usually want 'ses-test'.
mes <- 'hovers' #measure: 'clicks' or 'hovers'. usually want 'clicks'.
if(mes=='clicks'){idx <- 1}else{idx <- 2}
version <- '20240325' #pilot: 20240325
###
# format the raw data
grp_data <- data.frame(
sub = integer(),
test = integer(),
t = integer(),
cond = integer(),
onset = numeric(),
door = integer(),
cond = integer(),
door_correct = integer(),
offset = numeric()
)
for(sub in subs){
data <- get_data(data_path,exp,sub,ses)
grp_data <- rbind(grp_data,data[[idx]])
}
###
# extract results: accuracy and RT (time to trial end)
#   by trial
res <- grp_data %>% group_by(sub,group,t,cond) %>% summarise(
n_clicks = n(),
n_correct = sum(door_correct),
accuracy = n_correct/n_clicks,
rt = max(offset)
) %>% select(!n_clicks:n_correct)
fnl <- file.path(project_path,'res',paste(version,'_trl.csv',sep = ""))
write_csv(res,fnl)
#   by subject
res <- res %>% group_by(sub,group,cond) %>% summarise(rt = mean(rt),accuracy = mean(accuracy))
fnl <- file.path(project_path,'res',paste(version,'_avg.csv',sep = ""))
write_csv(res,fnl)
View(res)
# lydia barnes, march 2024
# this script extracts, formats, and summarises data from the 'doors' project.
# TODO:
# remove redundancy bw door_correct and door_cc
# produce alternate results grouped by door identity instead of nclicks
###
# sources
library(tidyverse)
source(file.path(getwd(),'src','get_data.R'))
# lydia barnes, march 2024
# generates figures from 'doors' project RT and accuracy outputs
### sources
library(tidyverse)
library(ggforce)
library(ggsci)
# essentials
project_path <- getwd()
# settings
version <- "study-01"
exp <- "exp_lt" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-test" # session: 'ses-learn','ses-train','ses-test'
mes <- "clicks" # measure: 'clicks' or 'hovers'
title_sz <- 20
label_sz <- 20
mk_sz <- 2
### plot the data!
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "avg", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
# lydia barnes, march 2024
# generates figures from 'doors' project RT and accuracy outputs
### sources
library(tidyverse)
library(ggforce)
library(ggsci)
# essentials
project_path <- getwd()
# settings
version <- "study-01"
exp <- "exp_lt" # experiment: 'exp_ts' (task-conding) or 'exp_lt' (learning transfer)
ses <- "ses-test" # session: 'ses-learn','ses-train','ses-test'
mes <- "clicks" # measure: 'clicks' or 'hovers'
title_sz <- 20
label_sz <- 20
mk_sz <- 2
### plot the data!
fnl <- file.path(project_path, "res", paste(paste(version, exp, mes, "avg", sep = "_"), ".csv", sep = ""))
res <- read.csv(fnl)
